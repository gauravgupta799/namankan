@use "../abstract/mixins" as *;
@use "../abstract/functions" as *;
@use "../abstract/fonts" as *;
@use "../abstract/colors" as *;

// ===== base and responsive font size  ========

// Breakpoint values for min-width operators.
$breakpoints: (
  sm: em(576),
  md: em(768),
  lg: em(992),
  xl: em(1280),
  xxl:em(1600),
);


// Null is mobile, no breakpoint.
$p-font-sizes: (
  null:(rem(16), rem(26)), // Font sizes and line height 
  sm: (rem(16), rem(26)),
  md: (rem(16), rem(26)),
  lg: (rem(18), rem(28)),
  xl: (rem(18), rem(28)),
  xxl:(rem(20), rem(32)), 
);


$h1-font-sizes: (
  null: (rem(40), rem(48)),   
  sm: (rem(44), rem(52)),
  md: (rem(44), rem(52)),
  lg: (rem(48), rem(58)),
  xl: (rem(52), rem(62)),
  xxl: (rem(60), rem(72)),
);

$h2-font-sizes:(
  null:(rem(36), rem(42)), 
  sm:(rem(40), rem(48)),
  md:(rem(40), rem(48)),
  lg:(rem(44), rem(52)),
  xl:(rem(48), rem(58)),
  xxl:(rem(56), rem(67)),
);

$h3-font-sizes: (
  null:(rem(32), rem(38)), 
  sm:(rem(36), rem(42)),
  md:(rem(36), rem(42)),
  lg:(rem(40), rem(48)),
  xl:(rem(44), rem(52)),
  xxl:(rem(48), rem(58)),
);

$h4-font-sizes: (
  null:(rem(24), rem(28)), 
  sm :(rem(26), rem(32)),
  md :(rem(26), rem(32)),
  lg :(rem(28), rem(34)),
  xl :(rem(32), rem(38)),
  xxl :(rem(40), rem(48)),
);

$h5-font-sizes: (
  null:(rem(22), rem(26)), 
  sm :(rem(24), rem(28)),
  md :(rem(24), rem(28)),
  lg :(rem(26), rem(32)),
  xl :(rem(28), rem(34)),
  xxl:(rem(32), rem(38)),
); 


$h6-font-sizes: (
  null: (rem(20), rem(24)),
  sm : (rem(22), rem(26)),
  md : (rem(22), rem(26)),
  lg : (rem(24), rem(28)),
  xl:  (rem(24), rem(28)),
  xxl: (rem(28), rem(34)),
); 


@mixin font-size($fs-map, $fs-breakpoints:$breakpoints){
    @each $fs-breakpoint, $fs-font-size in $fs-map{
        @if $fs-breakpoint == null{
            @include make-font-size($fs-font-size);
        }
        @else{
            @if map-has-key($fs-breakpoints, $fs-breakpoint){
                $fs-breakpoint:map-get($fs-breakpoints, $fs-breakpoint);
            }
            @media screen and (min-width:$fs-breakpoint){
                @include make-font-size($fs-font-size);
            }
        }
    }
}


// Utility function for mixin font-size
@mixin make-font-size($fs-font-size){
    @if type-of($fs-font-size) == "list" {
        font-size:nth($fs-font-size, 1);
        @if (length($fs-font-size) > 1){
            line-height: nth($fs-font-size, 2);
        }
    }
    @else{
        font-size: $fs-font-size;
    }
}


// ======== adding both font size and font-family mixins====

h1{
    @include font-size($h1-font-sizes);
}
h2{
    @include font-size($h2-font-sizes);
}
h3{
    @include font-size($h3-font-sizes);
}
h4{
    @include font-size($h4-font-sizes);
}
h5{
    @include font-size($h5-font-sizes);
}
h6{
    @include font-size($h6-font-sizes);
}

h1, h2, h3, h4, h5, h6{
    @include font-heading;
}

p, ul, ol, body{
    @include font-size($p-font-sizes);
    @include font-body;
}